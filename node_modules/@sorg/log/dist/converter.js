"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var styler_1 = require("./styler");
var handleStyle_1 = require("./handleStyle");
exports.converter = function (message, ctx) {
    if (message === null) {
        return { message: convertNullOrUndefined('null', ctx), styled: true };
    }
    switch (typeof message) {
        case 'undefined':
            return { message: convertNullOrUndefined('undefined', ctx), styled: true };
        case 'string':
            return { message: convertString(message, ctx), styled: !!ctx.styled };
        case 'number':
            return { message: convertNumber(message, ctx), styled: !!ctx.styled };
        case 'object':
            return { message: convertObject(message, ctx), styled: true };
    }
    return { message: '::NOT IMPLEMENTED::', styled: false };
};
function getWrapper(ctx) {
    return ctx.isObject ? [' ', '\n'] : [ctx.index === 0 ? '' : ' ', ''];
}
function convertNullOrUndefined(type, ctx) {
    removeCurrentBrowserStyle(ctx);
    addBrowserStyle(ctx, ctx.typeStyles[type]);
    return styler_1.styler({ message: type, wrap: true, styled: false }, ctx.typeStyles[type], getWrapper(ctx));
}
function convertString(message, ctx) {
    if (ctx.isObject) {
        addBrowserStyle(ctx, ctx.typeStyles.string);
        return styler_1.styler({ message: message, styled: false }, ctx.typeStyles.string, ['"', '"\n']);
    }
    return message;
}
function convertNumber(message, ctx) {
    removeCurrentBrowserStyle(ctx);
    addBrowserStyle(ctx, ctx.typeStyles.number);
    return styler_1.styler({ message: "" + message, styled: false, wrap: true }, ctx.typeStyles.number, getWrapper(ctx));
}
function addObjectKey(key, ctx) {
    addBrowserStyle(ctx, ctx.typeStyles.key);
    return styler_1.styler({ message: key + ": ", styled: false }, ctx.typeStyles.key);
}
function convertObject(object, ctx) {
    var brackets = ['{', '}'];
    if (Array.isArray(object)) {
        brackets = ['[', ']'];
        if (object.length === 0) {
            return "\n" + styler_1.styler('Array', ctx.typeStyles.name) + " " + styler_1.styler('[EMPTY]', ctx.typeStyles.emptyArray);
        }
    }
    var name = object.constructor.name;
    ctx.indentation = ctx.indentation ? ctx.indentation + 2 : 2;
    ctx.isObject = true;
    removeCurrentBrowserStyle(ctx);
    addBrowserStyle(ctx, ctx.typeStyles.name);
    var output = styler_1.styler("\n" + name + " ", ctx.typeStyles.name);
    addBrowserStyle(ctx, ctx.typeStyles.bracket);
    output += styler_1.styler(brackets[0] + "\n", ctx.typeStyles.bracket);
    for (var key in object) {
        if (object.hasOwnProperty(key)) {
            var item = object[key];
            output += addIndentation("" + addObjectKey(key, ctx) + exports.converter(item, ctx).message, ctx.indentation);
        }
    }
    output = output.replace(/\n?$/, '');
    ctx.indentation -= 2;
    output += styler_1.styler(addIndentation("" + brackets[1], ctx.indentation), ctx.typeStyles.bracket);
    addBrowserStyle(ctx, ctx.typeStyles.bracket);
    return output;
}
function addIndentation(text, indentation) {
    return text.replace(/^/, ' '.repeat(indentation));
}
function addBrowserStyle(ctx, style, offset) {
    if (ctx.browserContext) {
        var i = ctx.browserContext.index;
        var o = ctx.browserContext.offset;
        ctx.browserContext.styles.splice(i + o, 0, handleStyle_1.createBrowserStyle(style));
        if (offset) {
            ctx.browserContext.offset++;
        }
    }
}
function removeCurrentBrowserStyle(ctx) {
    if (ctx.browserContext) {
        var i = ctx.browserContext.index;
        var o = ctx.browserContext.offset;
        ctx.browserContext.styles.splice(i + o, 1);
    }
}
