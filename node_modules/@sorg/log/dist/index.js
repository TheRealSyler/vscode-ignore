"use strict";
var __spreadArrays = (this && this.__spreadArrays) || function () {
    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
    for (var r = Array(s), k = 0, i = 0; i < il; i++)
        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
            r[k] = a[j];
    return r;
};
Object.defineProperty(exports, "__esModule", { value: true });
var utils_1 = require("./utils");
var handleStyle_1 = require("./handleStyle");
var converter_1 = require("./converter");
var styler_1 = require("./styler");
var utils_2 = require("./utils");
exports.SetEnvironment = utils_2.SetLoggerEnvironment;
var converter_2 = require("./converter");
exports.converter = converter_2.converter;
var styler_2 = require("./styler");
exports.styler = styler_2.styler;
var presets_1 = require("./presets");
exports.PresetNodeHelp = presets_1.PresetNodeHelp;
var defaultStyles = {
    bracket: '#fa4',
    key: '#0c1',
    number: '#0AA',
    string: '#f64',
    name: '#fff',
    null: '#06f',
    undefined: '#06f',
    emptyArray: '#06f'
};
var Logger = /** @class */ (function () {
    function Logger(types) {
        this.types = types;
        for (var key in types) {
            if (types.hasOwnProperty(key)) {
                var type = types[key];
                type.enabled = type.enabled === false ? false : true;
                if (utils_1.isBrowser && type.styles) {
                    type.styles = type.styles.map(function (style) { return handleStyle_1.createBrowserStyle(style); });
                }
            }
        }
    }
    Logger.prototype.Log = function (type) {
        var messages = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            messages[_i - 1] = arguments[_i];
        }
        if (this.types[type].enabled) {
            var _typeStyles = this.types[type].typeStyles;
            var typeStyles = _typeStyles ? _typeStyles : defaultStyles;
            var _styles = this.types[type].styles;
            var styles = _styles ? _styles : [];
            var browserContext = utils_1.isBrowser
                ? { styles: cleanBrowserStyles.apply(void 0, __spreadArrays([messages, typeStyles], styles)), index: 0, offset: 0 }
                : undefined;
            var wrappers = (this.types[type].wrappers === undefined ? [] : this.types[type].wrappers);
            var data = { rawMessages: messages, styles: styles, wrappers: wrappers, typeStyles: typeStyles };
            var msg = '';
            var preset = this.types[type].preset;
            if (preset !== undefined) {
                msg = preset.Use(data);
            }
            else {
                var CustomHandler = this.types[type].customHandler;
                if (CustomHandler !== undefined) {
                    msg = CustomHandler(data);
                }
                else {
                    for (var i = 0; i < messages.length; i++) {
                        if (browserContext) {
                            browserContext.index = i;
                        }
                        msg += styler_1.styler(converter_1.converter(messages[i], { browserContext: browserContext, typeStyles: typeStyles, index: i }), styles[i], wrappers[i]);
                    }
                }
            }
            if (browserContext) {
                console.log.apply(console, __spreadArrays([msg], browserContext.styles));
            }
            else {
                console.log(msg);
            }
        }
    };
    Logger.prototype.SetEnabled = function (type, val) {
        this.types[type].enabled = val;
    };
    return Logger;
}());
exports.Logger = Logger;
function cleanBrowserStyles(messages, typeStyles) {
    var styles = [];
    for (var _i = 2; _i < arguments.length; _i++) {
        styles[_i - 2] = arguments[_i];
    }
    for (var i = 0; i < messages.length; i++) {
        if (typeof messages[i] !== 'string') {
            styles.splice(i, 0, 'PLACEHOLDER');
        }
        else if (styles[i] === undefined) {
            styles.splice(i, 0, handleStyle_1.createBrowserStyle(typeStyles.string));
        }
    }
    if (styles.length > messages.length) {
        styles = styles.slice(0, messages.length);
    }
    return styles;
}
