"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
var converter_1 = require("./converter");
var styler_1 = require("./styler");
var Preset = /** @class */ (function () {
    function Preset(func) {
        this.func = func;
    }
    Preset.prototype.Use = function (data) {
        return this.func(this, data);
    };
    return Preset;
}());
exports.Preset = Preset;
var PresetNodeHelp = /** @class */ (function (_super) {
    __extends(PresetNodeHelp, _super);
    function PresetNodeHelp(text, splitter, firstColumnWidth, secondColumnWidth) {
        if (splitter === void 0) { splitter = ';'; }
        if (firstColumnWidth === void 0) { firstColumnWidth = 20; }
        if (secondColumnWidth === void 0) { secondColumnWidth = 120; }
        var _this = _super.call(this, nodeHelpMessage) || this;
        _this.text = text;
        _this.splitter = splitter;
        _this.firstColumnWidth = firstColumnWidth;
        _this.secondColumnWidth = secondColumnWidth;
        return _this;
    }
    return PresetNodeHelp;
}(Preset));
exports.PresetNodeHelp = PresetNodeHelp;
var nodeHelpMessage = function (preset, data) {
    if (preset.text) {
        var lines = preset.text.split(/\n/g);
        preset.text = undefined;
        var output = '';
        output += nodeHelpMessage(preset, __assign(__assign({}, data), { rawMessages: ['\n ', ' '] }));
        for (var _i = 0, lines_1 = lines; _i < lines_1.length; _i++) {
            var line = lines_1[_i];
            output += nodeHelpMessage(preset, __assign(__assign({}, data), { rawMessages: '\n'.concat(line).split(preset.splitter) }));
        }
        output += nodeHelpMessage(preset, __assign(__assign({}, data), { rawMessages: ['\n ', ''] }));
        return output.replace(/^\n/, '');
    }
    else {
        var messages = [];
        for (var i = 0; i < data.rawMessages.length; i++) {
            messages.push(converter_1.converter(data.rawMessages[i], { typeStyles: data.typeStyles, index: i }));
        }
        var lastIndex = messages.length - 1;
        if (messages.length > 1) {
            var space = preset.firstColumnWidth - messages[0].message.length;
            if (space >= 0) {
                messages[0].message = messages[0].message.replace(/^(\n)?/, '$1 ').concat(' '.repeat(space));
            }
            var concatenatedMessages = '';
            for (var i = 1; i < messages.length; i++) {
                concatenatedMessages += messages[i].message;
            }
            var endingSpace = preset.secondColumnWidth - (concatenatedMessages.length + (messages.length - 1) * 2);
            if (endingSpace >= 0) {
                messages[lastIndex].message = messages[lastIndex].message.concat(' '.repeat(endingSpace));
            }
        }
        var output = '';
        for (var i = 0; i < messages.length; i++) {
            messages[i].message = messages[i].message.replace(/^(\n)?/, '$1 ');
            output += styler_1.styler(messages[i], data.styles[i], ['', ' ']);
        }
        return output;
    }
};
