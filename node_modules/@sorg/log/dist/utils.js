"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var s_color_1 = require("s.color");
exports.isBrowser = typeof window !== 'undefined' && typeof window.document !== 'undefined';
/**
 * Can be used to change the assumed environment
 */
function SetLoggerEnvironment(env) {
    exports.isBrowser = env === 'browser';
}
exports.SetLoggerEnvironment = SetLoggerEnvironment;
function stringColorToAnsi256(color) {
    if (!color) {
        return undefined;
    }
    var _a = s_color_1.StringToRGB(color, true), r = _a.r, g = _a.g, b = _a.b;
    if (r === g && g === b) {
        if (r < 8) {
            return 16;
        }
        if (r > 248) {
            return 231;
        }
        return Math.round(((r - 8) / 247) * 24) + 232;
    }
    var ansi = 16 + 36 * Math.round((r / 255) * 5) + 6 * Math.round((g / 255) * 5) + Math.round((b / 255) * 5);
    return ansi;
}
exports.stringColorToAnsi256 = stringColorToAnsi256;
function ConvertHexString(text) {
    var color = { red: 0, green: 0, blue: 0, alpha: 0 };
    var raw = text.replace('#', '');
    var length = raw.length;
    var modulo = length % 3;
    color.red =
        length > 4 ? parseInt(raw.substring(0, 2), 16) : parseInt(raw.substring(0, 1).concat(raw.substring(0, 1)), 16);
    color.green =
        length > 4 ? parseInt(raw.substring(2, 4), 16) : parseInt(raw.substring(1, 2).concat(raw.substring(1, 2)), 16);
    color.blue =
        length > 4 ? parseInt(raw.substring(4, 6), 16) : parseInt(raw.substring(2, 3).concat(raw.substring(2, 3)), 16);
    if (modulo) {
        color.alpha =
            length > 4
                ? parseInt(raw.substring(length - modulo, length), 16)
                : parseInt(raw.substring(length - modulo, length).concat(raw.substring(length - modulo, length)), 16);
        color.alpha = color.alpha;
    }
    else {
        color.alpha = 1;
    }
    return [color.red, color.green, color.blue];
}
