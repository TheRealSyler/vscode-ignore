"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __spreadArrays = (this && this.__spreadArrays) || function () {
    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
    for (var r = Array(s), k = 0, i = 0; i < il; i++)
        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
            r[k] = a[j];
    return r;
};
Object.defineProperty(exports, "__esModule", { value: true });
var vscode_textmate_1 = require("vscode-textmate");
var logger_1 = require("./logger");
var path_1 = require("path");
var TestGrammar = /** @class */ (function () {
    function TestGrammar(source, options, initFunc) {
        var _this = this;
        this.initFunc = initFunc;
        this.stats = {
            cases: 0,
            failedLines: 0,
            failedTokens: 0,
            lines: 0,
            passedLines: 0,
            passedTokens: 0,
            tokens: 0,
            errors: 0,
            failedCases: 0,
            passedCases: 0
        };
        this.options = {
            logAllTokens: false,
            exitProcess: true,
            useSourceAsFile: false
        };
        this.run = function (name, text, expect, options) {
            var resetOptions = null;
            if (options !== undefined) {
                resetOptions = _this.options;
                _this.SetOptions(options);
            }
            var TEXT = _this.transformText(text);
            var EXPECT = _this.transformExpect(expect);
            if (TEXT.length !== EXPECT.length) {
                logger_1.logger.Log('invalid', 'CASE', name, 'parameter "text" and "expect" are expected to have the same number of lines/array length');
                _this.stats.errors++;
                return;
            }
            var ruleStack = vscode_textmate_1.INITIAL;
            var failed = false;
            for (var i = 0; i < TEXT.length; i++) {
                var line = TEXT[i];
                var lineTokens = _this.grammar.tokenizeLine(line, ruleStack);
                var failedLine = false;
                _this.stats.lines++;
                var max = Math.max(EXPECT[i].length, lineTokens.tokens.length);
                for (var j = 0; j < max; j++) {
                    var token = lineTokens.tokens[j];
                    _this.stats.tokens++;
                    if (token === undefined) {
                        logger_1.logger.Log('failed', { token: { endIndex: 0, startIndex: 0 }, line: line }, name, i, j, __spreadArrays([_this.scope], EXPECT[i][j]).toString(), 'undefined');
                        _this.stats.failedTokens++;
                        failedLine = true;
                        failed = true;
                        continue;
                    }
                    if (EXPECT[i][j] === undefined) {
                        logger_1.logger.Log('failed', { token: token, line: line }, name, i, j, 'undefined', token.scopes.toString());
                        _this.stats.failedTokens++;
                        failedLine = true;
                        failed = true;
                        continue;
                    }
                    var expected = __spreadArrays([_this.scope], EXPECT[i][j]).toString();
                    var passed = token.scopes.toString() === expected;
                    if (passed) {
                        if (_this.options.logAllTokens) {
                            logger_1.logger.Log('passed', { token: token, line: line }, name, i, j);
                        }
                        _this.stats.passedTokens++;
                    }
                    else {
                        logger_1.logger.Log('failed', { token: token, line: line }, name, i, j, expected.toString(), token.scopes.toString());
                        failed = true;
                        failedLine = true;
                        _this.stats.failedTokens++;
                    }
                }
                if (failedLine) {
                    _this.stats.failedLines++;
                }
                else {
                    _this.stats.passedLines++;
                }
                ruleStack = lineTokens.ruleStack;
            }
            if (failed) {
                _this.stats.failedCases++;
            }
            else {
                logger_1.logger.Log('passed', null, name);
                _this.stats.passedCases++;
            }
            if (resetOptions !== null) {
                _this.SetOptions(resetOptions);
            }
            _this.stats.cases++;
        };
        try {
            if (options) {
                this.SetOptions(options);
            }
            var file_1;
            if (this.options.useSourceAsFile) {
                file_1 = JSON.parse(source);
            }
            else {
                file_1 = require(path_1.normalize(process.cwd() + "/" + source));
            }
            this.scope = file_1.scopeName;
            this.registry = new vscode_textmate_1.Registry({
                loadGrammar: function () {
                    return file_1;
                }
            });
            this.Init();
        }
        catch (_a) {
            if (this.options.useSourceAsFile) {
                logger_1.logger.Log('invalid', 'JSON', 'Source is not valid Json.', source);
            }
            else {
                logger_1.logger.Log('invalid', 'FILE', 'Cannot Run test with invalid source file:', path_1.normalize(process.cwd() + "/" + source));
            }
        }
    }
    TestGrammar.prototype.SetOptions = function (options) {
        var tempOptions = {
            logAllTokens: this.getOption('logAllTokens', options),
            useSourceAsFile: this.getOption('useSourceAsFile', options),
            exitProcess: this.getOption('exitProcess', options)
        };
        this.options = tempOptions;
    };
    TestGrammar.prototype.getOption = function (name, options) {
        return options[name] !== undefined ? options[name] : this.options[name];
    };
    TestGrammar.prototype.Init = function () {
        return __awaiter(this, void 0, void 0, function () {
            var _a;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        _a = this;
                        return [4 /*yield*/, this.registry.loadGrammar(this.scope)];
                    case 1:
                        _a.grammar = _b.sent();
                        this.initFunc(this.run.bind(this));
                        logger_1.logger.Log('stats', this.stats);
                        if ((this.options.exitProcess && this.stats.failedCases !== 0) ||
                            (this.options.exitProcess && this.stats.errors !== 0)) {
                            process.exit(1);
                        }
                        return [2 /*return*/];
                }
            });
        });
    };
    TestGrammar.prototype.transformText = function (text) {
        if (typeof text === 'string') {
            return text.split(/\n/);
        }
        return text;
    };
    TestGrammar.prototype.transformExpect = function (expect) {
        if (typeof expect === 'string') {
            if (expect.length === 0) {
                return [[[]]];
            }
            return expect.split(/\n/).map(function (val) {
                if (val.length === 0) {
                    return [[]];
                }
                return val.split(/\|/).map(function (v) {
                    if (v.length === 0) {
                        return [];
                    }
                    return v.split(/ /);
                });
            });
        }
        return expect;
    };
    return TestGrammar;
}());
exports.TestGrammar = TestGrammar;
